# Path to your oh-my-zsh installation.
export ZSH=~/dotfiles/zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="ordealz"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git git-extras git-flow brew colorize heroku npm yarn node man-colors)

# User configuration

export PATH=$HOME/dotfiles/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin:/sbin:/opt/homebrew/bin
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
export EDITOR='nvim'

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# reload zsh config
alias reload!='source ~/.zshrc'

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # OS X `ls`
    colorflag="-G"
fi

# Filesystem aliases
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias l="ls-git -lah ${colorflag}"
alias l.="ls-git -dahl ${colorflag} .*"
alias la="ls-git -AF ${colorflag}"

# alias ll="ls-git -laFh ${colorflag}"
# alias ll='paste <(CLICOLOR_FORCE=true ls -ld *) <(for i in *; do if [ -d "$i"/.git ] ; then echo "($(git --git-dir="$i"/.git symbolic-ref --short HEAD))"; else echo; fi; done)'
alias lld="l -d */"
alias rmf="rm -rf"

alias cp='cp -i'
alias mv='mv -i'

# Applications
alias preview='open -a Preview'

# Hide & show hidden files
alias showHidden="defaults write com.apple.finder AppleShowAllFiles ON; killall Finder"
alias hideHidden="defaults write com.apple.finder AppleShowAllFiles OFF; killall Finder"

# Helpers
alias grep='grep --color=auto'
alias df='df -h' # disk free, in Gigabytes, not bytes
alias du='du -h -c' # calculate disk usage for a folder
alias sleepless="pmset -g assertions | egrep '(PreventUserIdleSystemSleep|PreventUserIdleDisplaySleep)'"

# Search & Replace in files
function replace() {
  perl -pi -w -e `s/$1/$2/g;` $3
}

function color () {
   if   [[ "$1" == "black"  ]]; then echo -e "\033[10;30m$2\033[0m";  # Black
   elif [[ "$1" == "red"    ]]; then echo -e "\033[10;31m$2\033[0m";  # Red
   elif [[ "$1" == "green"  ]]; then echo -e "\033[10;32m$2\033[0m";  # Green
   elif [[ "$1" == "yellow" ]]; then echo -e "\033[10;33m$2\033[0m";  # Yellow
   elif [[ "$1" == "blue"   ]]; then echo -e "\033[10;34m$2\033[0m";  # Blue
   elif [[ "$1" == "purple" ]]; then echo -e "\033[10;35m$2\033[0m";  # Purple
   elif [[ "$1" == "cyan"   ]]; then echo -e "\033[10;36m$2\033[0m";  # Cyan
   else                            echo -e "\033[10;37m$2\033[0m";  # normal (white)
   fi;
}

function branchColor () {
  local result=""

  # Check if the branch has uncommitted changes
  if [[ $(git -C "$1" status --porcelain) ]]; then
    echo -e "\033[10;31m";  # Red
    return
  fi

  # Check if the branch was never pushed to origin
  if ! git -C "$1" rev-parse --abbrev-ref --symbolic-full-name @{u} &>/dev/null; then
    echo -e "\033[10;35m";  # Purple
    return
  fi

  # Check if remote is behind local
  if [ $(git -C "$1" rev-list --count @{u}..HEAD) -ne 0 ]; then
    echo -e "\033[10;33m";  # Yellow
    return
  fi

  # Check if local is behind remote
  if [ $(git -C "$1" rev-list --count HEAD..@{u}) -ne 0 ]; then
    echo -e "\033[10;36m";  # Cyan
    return
  fi

  # Otherwise, looking good.
  echo -e "\033[10;32m";  # Green
}

function shortStat () {
  local result=""

  # Check if the branch has uncommitted changes
  if [[ $(git -C "$1" status --porcelain) ]]; then
    result+=`color blue "•"`
  fi

  # Check if the branch was never pushed to origin
  if ! git -C "$1" rev-parse --abbrev-ref --symbolic-full-name @{u} &>/dev/null; then
    result+=`color red "⤫"`
    echo "$result"
    return
  fi

  # Check if local and remote have differing commits
  if [ $(git -C "$1" rev-list --count HEAD..@{u}) -ne 0 ]; then
    result+=`color green "↓"`
  fi

  # Check if remote is behind local
  if [ $(git -C "$1" rev-list --count @{u}..HEAD) -ne 0 ]; then
    result+=`color gren "↑"`
  fi

  echo "$result"
}

# Get branch names for git repos
function gitBranchll() {
  paste -d ' ' <(CLICOLOR_FORCE=true ls -al $1) <(
    target=${1:-.}
    if [ -d $target ]; then cd $target; fi;
    find . -maxdepth 1 -exec ls -ad {} + | sed '1s/^/""\n""\n/' | while read -r i; do
      if [ -d "$i"/.git ]; then
        echo -e "($(branchColor $i)$(git --git-dir=$i/.git symbolic-ref --short HEAD)\033[0m)";
      else
        echo; 
      fi;
    done
  )
}

# gitLL () {
#   if [ -d "$1" ]; then
#     cd "$1";
#     shift;
#     gitLL $*;
#     cd -;
#     return 0;
#   fi;
#   ls -alh $* | while read line; do
#     permissions=`echo "$line" | cut -d ' ' -f 1`;
#     folder=`echo "$line" | rev | cut -d ' ' -f 1 | rev`;
#
#     if [[ $permissions == lrwx* ]] ; then
#       coloredLink=`color purple "$folder"`;
#       echo -e "$line" | sed -e "s%$folder%$coloredLink%";
#     elif [[ $permissions == drwx* ]] ; then
#       currentBranch=`(cd $folder >/dev/null 2>&1 && [ -d .git ] && git branch 2>/dev/null | grep \* | cut -d ' ' -f2)`
#       if [ "$currentBranch" != "" ]; then
#         currentBranch=`color red " ($currentBranch)"`;
#       fi;
#       coloredFolder=`color blue "$folder"`;
#       echo -e "$line$currentBranch" | sed -e "s%$folder%$coloredFolder%";
#     else
#       echo -e "$line $(color green $size)";
#     fi;
#   done;
# }

alias ll='gitBranchll'

#pattern: replace 's/search/replace/g;' *.file
#alias replace="perl -pi -w -e"

# Search & Replace in folder names
# alias folderReplace="find . -regex '.*docs\/.*js' -type f | rename --make-dirs 's/docs/fixtures/g'"


# IP addresses
alias whereami="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias router="dig +short myip.opendns.com @resolver1.opendns.com"

# Flush Directory Service cache
alias flush="dscacheutil -flushcache"

# View HTTP traffic
#alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
#alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# Trim new lines and copy to clipboard
alias trimcopy="tr -d '\n' | pbcopy"

# Recursively delete `.DS_Store` files
alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"

# File size
alias fs="stat -f \"%z bytes\""

# Empty the Trash on all mounted volumes and the main HDD
#alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; rm -rfv ~/.Trash"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 10'"
alias poop='say fartt fartt poop poop fartt'

alias vim='nvim';
alias vi='nvim';
alias v='nvim';

# Source profile (bash or otherwise)
if [ -f ~/.profile.local ]; then
    source ~/.profile.local
fi

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Load FNM and node. If slow, comment this out and uncomment the chunk below.
eval "$(/opt/homebrew/bin/fnm env)"

# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
# if [ -s "$HOME/.nvm/nvm.sh" ] && [ ! "$(whence -w __init_nvm)" = function ]; then
#   export NVM_DIR="$HOME/.nvm"
#   [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
#   declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
#   function __init_nvm() {
#     for i in "${__node_commands[@]}"; do unalias $i; done
#     . "$NVM_DIR"/nvm.sh
#     unset __node_commands
#     unset -f __init_nvm
#   }
#   for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
# fi

export TARGET_ENV=local

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPS='--extended'
export FZF_DEFAULT_COMMAND='rg --hidden --files --follow --glob "!.git/*"'

eval "$(pyenv init -)"
eval "$(/opt/homebrew/bin/brew shellenv)"

# fnm
FNM_PATH="/Users/mrl37/Library/Application Support/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="/Users/mrl37/Library/Application Support/fnm:$PATH"
  eval "`fnm env`"
fi
